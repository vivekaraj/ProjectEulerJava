import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

public class Problems {
	//Find the sum of all the multiples of 3 or 5 below 1000.
	public static int Problem1() {
		int sumMultThree = 3 * 333 * 334 / 2;
		int sumMultFive = 5 * 199 * 200 / 2;
		int sumMultFifteen = 15 * 66 * 67 / 2;
		return sumMultThree + sumMultFive - sumMultFifteen;
	}
	
	//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	public static int Problem2() {
		int sum = 2;
		int first = 1;
		int second = 2;
		int third = first + second;
		while(third < 4000000) {			
			if(third % 2 == 0) {
				sum += third;
			}
			first = second;
			second = third;
			third = first + second;
		}
		return sum;
	}
	
	//What is the largest prime factor of the number 600851475143 ?
	public static int Problem3() {
		long a = 600851475143L;
		int count = 2;
		while(a > 1) {
			count++;
			if(a % count == 0) {
				a /= count;
			}
		}
		return count;
	}
	
	private static boolean isSixDigitPalindrome(int num) {
		String str = "" + num;
		if(str.length() != 6) {
			return false;
		}
		for(int i = 0; i <= 3; i++) {
			if(str.charAt(i) != str.charAt(-1 * i + 5)) {
				return false;
			}
		}
		return true;
	}
	
	//Find the largest palindrome made from the product of two 3-digit numbers.
	public static int Problem4() {
		int palindrome = -1;
		for(int i = 999; i >= 100; i--) {
			for(int j = 999; j >= 100; j--) {
				if(i * j > palindrome && isSixDigitPalindrome(i * j)) {
					palindrome = i * j;
				}
			}
		}
		return palindrome;
	}
	
	//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
	public static int Problem5() {
		int answer = 2520;
		boolean stop = false;
		while(!stop) {
			answer++;
			stop = true;
			for(int i = 1; i <= 20; i++) {
				if(answer % i != 0) {
					stop = false;
					break;
				}
			}
		}
		return answer;
	}
	
	//Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
	public static int Problem6() {
		int squareOfSumOfFirst100 = (100 * 101 / 2) * (100 * 101 / 2);
		int sumOfFirst100Squares = 1;
		for(int i = 2; i <= 100; i++) {
			sumOfFirst100Squares += (i * i);
		}
		return Math.abs(sumOfFirst100Squares - squareOfSumOfFirst100);
	}
	
	private static boolean isPrime(int num) {
		for(int i = 2; i < num/2; i++) {
			if(num % i == 0) {
				return false;
			}
		}
		return true;
	}
	
	//What is the 10001st prime number?
	public static int Problem7() {
		int count = 1;
		int num = 3;
		while(count < 10001) {
			if(num % 2 != 0 && isPrime(num)) {
				count++;
			}
			num++;
		}
		return num-1;
	}
	
	//Find the greatest product of five consecutive digits in the 1000-digit number in the txt file
	public static int Problem8() throws FileNotFoundException {
		String num = "73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450";
	}
	
	public static void main (String[] args) {
		System.out.println("Problem 1: " + Problem1());
		System.out.println("Problem 2: " + Problem2());
		System.out.println("Problem 3: " + Problem3());
		System.out.println("Problem 4: " + Problem4());
		System.out.println("Problem 5: " + 232792560); //derived from method Problem5(), but it takes too long to execute
		System.out.println("Problem 6: " + Problem6());		
		System.out.println("Problem 7: " + 104743);	//derived from method Problem7(), but it takes too long to execute	
	
	}
}
