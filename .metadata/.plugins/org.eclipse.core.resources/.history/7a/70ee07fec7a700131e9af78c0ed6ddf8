import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

public class Problems {
	private ArrayList<Integer> primeNumbers = new ArrayList<Integer>();
	//Find the sum of all the multiples of 3 or 5 below 1000.
	public static int Problem1() {
		int sumMultThree = 3 * 333 * 334 / 2;
		int sumMultFive = 5 * 199 * 200 / 2;
		int sumMultFifteen = 15 * 66 * 67 / 2;
		return sumMultThree + sumMultFive - sumMultFifteen;
	}
	
	//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	public static int Problem2() {
		int sum = 2;
		int first = 1;
		int second = 2;
		int third = first + second;
		while(third < 4000000) {			
			if(third % 2 == 0) {
				sum += third;
			}
			first = second;
			second = third;
			third = first + second;
		}
		return sum;
	}
	
	//What is the largest prime factor of the number 600851475143 ?
	public static int Problem3() {
		long a = 600851475143L;
		int count = 2;
		while(a > 1) {
			count++;
			if(a % count == 0) {
				a /= count;
			}
		}
		return count;
	}
	
	private static boolean isSixDigitPalindrome(int num) {
		String str = "" + num;
		if(str.length() != 6) {
			return false;
		}
		for(int i = 0; i <= 3; i++) {
			if(str.charAt(i) != str.charAt(-1 * i + 5)) {
				return false;
			}
		}
		return true;
	}
	
	//Find the largest palindrome made from the product of two 3-digit numbers.
	public static int Problem4() {
		int palindrome = -1;
		for(int i = 999; i >= 100; i--) {
			for(int j = 999; j >= 100; j--) {
				if(i * j > palindrome && isSixDigitPalindrome(i * j)) {
					palindrome = i * j;
				}
			}
		}
		return palindrome;
	}
	
	//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
	public static int Problem5() {
		int answer = 2520;
		boolean stop = false;
		while(!stop) {
			answer++;
			stop = true;
			for(int i = 1; i <= 20; i++) {
				if(answer % i != 0) {
					stop = false;
					break;
				}
			}
		}
		return answer;
	}
	
	//Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
	public static int Problem6() {
		int squareOfSumOfFirst100 = (100 * 101 / 2) * (100 * 101 / 2);
		int sumOfFirst100Squares = 1;
		for(int i = 2; i <= 100; i++) {
			sumOfFirst100Squares += (i * i);
		}
		return Math.abs(sumOfFirst100Squares - squareOfSumOfFirst100);
	}
	
	private static boolean isPrime(int num) {
		for(int i = 2; i < num/2; i++) {
			if(num % i == 0) {
				return false;
			}
		}
		return true;
	}
	
	//What is the 10001st prime number?
	public static int Problem7() {
		int count = 1;
		int num = 3;
		while(count < 10001) {
			if(num % 2 != 0 && isPrime(num)) {
				count++;
			}
			num++;
		}
		return num-1;
	}
	
	//Find the greatest product of five consecutive digits in the 1000-digit number below
	public static int Problem8()  {
		String num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
		int maxProduct = 7 * 3 * 1 * 6 * 7;
		int prevProduct = 7 * 3 * 1 * 6 * 7;
		int[] fiveNums = {7, 3, 1, 6, 7};
		for(int i = 5; i < num.length(); i++) {
			String temp = "" + num.charAt(i);
			int tempNum = Integer.parseInt(temp);
			if(fiveNums[i % 5] != 0) {
				prevProduct /= fiveNums[i % 5];
				prevProduct *= tempNum;
			} else if(tempNum == 0) {
				prevProduct = 0;
			} else {
				prevProduct = 1;
				for(int j = 0; j < 5; j++) {
					if(i % 5 == j) {
						prevProduct *= tempNum;
					} else {
						prevProduct *= fiveNums[j];
					}
				}
			}
			fiveNums[i % 5] = tempNum;
			maxProduct = Math.max(maxProduct, prevProduct);
		}
		return maxProduct;
	}
	
	//There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.
	public static int Problem9() {
		for(int a = 1; a <= 1000; a++) {
			for(int b = 1; b <= 1000; b++) {
				int c2 = a * a + b * b;
				int c = (int) Math.sqrt(c2);
				if(c * c == c2 && a + b + c == 1000) {
					return a * b * c;
				}
			}
		}
		return -1;
	}
	
	//Find the sum of all the primes below two million.
	public static long Problem10(int max) {
		long sum = 0;
		Boolean[] isPrime = new Boolean[max + 1];
		for(int i = 2; i < max + 1; i++) {
			isPrime[i] = true;
		}
		for(int i = 2; i <= Math.sqrt(max); i++) {
			for(int j = i * i; j <= max; j += i) {
				isPrime[j] = false;
			}
		}
		for(int i = 2; i < max; i++) {
			if(isPrime[i]) {
				sum += i;
			}
		}
		return sum;
	}
	
	private static int prod(int[][] grid, int row1, int col1, int row2, int col2) {
		int product = 1;
		if(row1 == row2 && col1 != col2) {
			for(int i = col1; i <= col2; i++) {
				product *= grid[row1][i];
			}
			return product;
		} else if(row1 != row2 && col1 == col2) {
			for(int i = row1; i <= row2; i++) {
				product *= grid[i][col1];
			}
			return product;
		} else if(row1 < row2 && col1 != col2) {
			for(int i = 0; i <= 3; i++) {
				product *= grid[row1 + i][col1 + i];
			}
			return product;
		} else {
			for(int i = 0; i <= 3; i++) {
				product *= grid[row1 - i][col1 + i];
			}
			return product;
		}
	}
	
	//What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
	public static long Problem11() {
		String grid = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
		Scanner cons = new Scanner(grid);
		int[][] actualGrid = new int[20][20];
		int row = 0, col = 0;
		while(cons.hasNext()) {
			String temp = cons.next();
			int num = Integer.parseInt(temp);
			actualGrid[row][col] = num;
			col++;
			if(col == 20) {
				col -= 20;
				row++;
			}
		}
		int maxProduct = -1;
		for(int i = 0; i < 20; i++) {
			for(int j = 0; j < 20; j++) {
				if(i < 17 && j < 17) {
					maxProduct = Math.max(maxProduct, prod(actualGrid, i, j, i+3, j));
					maxProduct = Math.max(maxProduct, prod(actualGrid, i, j, i, j+3));
					maxProduct = Math.max(maxProduct, prod(actualGrid, i, j, i+3, j+3));
				} else if(i < 17) {
					maxProduct = Math.max(maxProduct, prod(actualGrid, i, j, i+3, j));
				} else if(j < 17) {
					maxProduct = Math.max(maxProduct, prod(actualGrid, i, j, i, j+3));
				} 
				if(i > 2 && j < 17) {
					maxProduct = Math.max(maxProduct, prod(actualGrid, i, j, i-3, j+3));
				}
			}
		}
		return maxProduct;
	}
	
	private static long numFactors(long n) {
		long temp = n;
		long numFactors = 1;
		for (int i = 2; i * i <= temp; ++i) {
		    int power = 0;
		    while (n % i == 0) {
		        n = n / i; 
		        ++power; 
		    }
		    numFactors *= (power + 1); 
		}

		if (n > 1) {
		    numFactors *= 2; 
		}
		
		return numFactors;
	}
	
	//What is the value of the first triangle number to have over five hundred divisors?
	public static long Problem12() {
		boolean keepGoing = true;
		long count = 1;
		long triNum = 1;
		while(keepGoing) {
			count++;
			triNum += count;
			if(numFactors(triNum) > 500) {
				keepGoing = false;
			}
		}
		return triNum;
	}
	
	//Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
	public static long Problem13() {
		String numbersPart1 = "37107287533902102798797998220837590246510135740250463769376774900097126481248969700780504170182605387432498619952474105947423330951305812372661730962991942213363574161572522430563301811072406154908250230675882075393461711719803104210475137780632466768926167069662363382013637841838368417873436172675728112879812849979408065481931592621691275889832738";
		String numbersPart2 = "442742289174325203219235894228767964876702721893184745144573600130643909116721685684458871160315327670386486105843025439939619828917593665686757934951621764571418565606295021572231965867550793241933316490635246274190492910143244581382266334794475817892575867718337217661963751590579239728245598838407582035653253593990084026335689488301894586282278288018119938482628201427819413994056758715117009439035398664372827112653829987240784473053190104293586865155060062958648615320752733719591914205172558297169388870771546649911559348760353292171497005693854370070576826684624621495650076471787294438377604532826541087568284431911906346940378552177792951453612327252500029607107508256381565671088525835072145876576172410976447339110607218265236877223636045174237069058518606604482076212098132878607339694128114266041808683061932846081119106155694051268969251934325451728388641918047049293215058642563049483624672216484350762017279180399446930047329563406911573244438690812579451408905770622942919710792820955037687525678773091862540744969844508330393682126183363848253301546861961243487676812975343759465158038628759287849020152168555482871720121925776695478182833757993103614740356856449095527097864797581167263201004368978425535399209318374414978068609844840309812907779179908821879532736447567559084803087086987551392711854517078544161852424320693150332599594068957565367821070749269665376763262354472106979395067965269474259770973916669376304263398708541052684708299085211399427365734116182760315001271653786073615010808570091499395125570281987460043753582903531743471732693212357815498262974255273730794953759765105305946966067683156574377167401875275889028025717332296191766687138199318110487701902712526768027607800301367868099252546340106163286652636270218540497705585629946580636237993140746255962240744869082311749777923654662572469233228109171419143028819710328859780666976089293863828502533340334413065578016127815921815005561868836468420090470230530811728164304876237919698424872550366387845831148769693215490281042402013833512446218144177347063783299490636259666498587618221225225512486764533677201869716985443124195724099139590089523100588229554825530026352078153229679624948164195386821877476085327132285723110424803456124867697064507995236377742425354112916842768655389262050249103265729672370191327572567528565324825826546309220705859652229798860272258331913126375147341994889534765745501184957014548792889848568277260777137214037988797153829820378303147352772158034814451349137322665138134829543829199918180278916522431027392251122869539409579530664052326325380441000596549391598795936352974615218550237130764225512118369380358038858490341698116222072977186158236678424689157993532961922624679571944012690438771072750481023908955235974572318970677254791506150550495392297953090112996751986188088225875314529584099251203829009407770775672113067397083047244838165338735023408456470580773088295917476714036319800818712901187549131054712658197623331044818386269515456334926366572897563400500428462801835170705278318394258821455212272512503275512160354698120058176216521282765275169129689778932238195734329339946437501907836945765883352399886755061649651847751807381688378610915273579297013376217784275219262340194239963916804498399317331273132924185707147349566916674687634660915035914677504995186714302352196288948901024233251169136196266227326746080059154747183079839286853520694694454072476841822524674417161514036427982273348055556214818971426179103425986472045168939894221798260880768528778364618279934631376775430780936333301898264209010848802521674670883215120185883543223812876952786713296124747824645386369930090493103636197638780396218407357239979422340623539380833965132740801111666627891981488087797941876876144230030984490851411606618262936828367647447792391803351109890697907148578694408955299065364044742557608365997664579509666024396409905389607120198219976047599490197230297649139826800329731560371200413779037855660850892521673093931987275027546890690370753941304265231501194809377245048795150954100921645863754710598436791786391670211874924319957006419179697775990283006991536871371193661495281130587638027841075444973307840789923115535562561142322423255033685442488917353448899115014406480203690680639606723221932041495354150312888033953605329934036800697771065056663195481234880673210146739058568557934581403627822703280826165707739483275922328459417065250945123252306082291880205877731971983945018088807242966198081119777158542502016545090413245809786882778948721859617721078384350691861554356628840622574736922845095162084960398013400172393067166682355524525280460972253503534226472524250874054075591789781264330331690";
		ArrayList<ArrayList<Integer>> digits = new ArrayList<ArrayList<Integer>>();
		int count = 0;
		ArrayList<Integer> temp = new ArrayList<Integer>();
		for(int i = 0; i < numbersPart1.length(); i++) {
			count++;
			if(count == 100) {
				count -= 100;
				digits.add(temp);
				temp = new ArrayList<Integer>();
			}
			temp.add(Integer.parseInt("" + numbersPart1.charAt(i)));
		}
		for(int i = 0; i < numbersPart2.length(); i++) {
			count++;
			if(count == 100) {
				count -= 100;
				digits.add(temp);
				temp = new ArrayList<Integer>();
			}
			temp.add(Integer.parseInt("" + numbersPart1.charAt(i)));

		}
	}
	
	public static void main (String[] args) {
		System.out.println("Problem 1: " + Problem1());
		System.out.println("Problem 2: " + Problem2());
		System.out.println("Problem 3: " + Problem3());
		System.out.println("Problem 4: " + Problem4());
		System.out.println("Problem 5: " + 232792560); //derived from method Problem5(), but it takes too long to execute
		System.out.println("Problem 6: " + Problem6());		
		System.out.println("Problem 7: " + 104743);	//derived from method Problem7(), but it takes too long to execute	
		System.out.println("Problem 8: " + Problem8());	
		System.out.println("Problem 9: " + Problem9());	
		System.out.println("Problem 10: " + Problem10(2000000));	
		System.out.println("Problem 11: " + Problem11());
		System.out.println("Problem 12: " + 76576500); //derived from method Problem12(), but it takes too long to execute	
	}
}